void convexHullGraham(Shape ** shape, int ** points, int nbPt, int l ){
	Shape * s = *shape;
	//Find the bottom-most point
	int minY = 99999999;
	int minX = 99999999;
	int rankMin = 0;

	for(int k = 0; k < s->nbPtE; k++){
		if(s->edges[k][0] < minY){ //y
			minY = s->edges[k][0];
			rankMin = k;
			if(s->edges[k][1] < minX){ //x
				minX = s->edges[k][1];
				rankMin = k;
			}
		}
	}

	//This point is the first point of the convex hull
	//It is the first point of the convex hull
	int ** intermediate1 = NULL;
	create1matrixInt(&(intermediate1), 3, s->nbPtE);

	intermediate1[0][0] = rankMin; //rank
	intermediate1[0][1] = 0; //angle
	intermediate1[0][2] = 0; //distance

	//Pt necessary for the angle's computation
	int vector_x1 = 0;
	int vector_y1 = 0;
	
	int vector_x2 = 0;
	int vector_y2 = 0;
	
	int axis_x = l-1;
	int axis_y = minY;
	
	//Now we compute all the angle between an horizontal axis and all the other point
	for(int k = 0; k < s->nbPtE; k++){
		if(k < rankMin){
			intermediate1[k+1][0] = k;
			
			//We compute the two vector
			vector(&vector_x1, &vector_y1, s->edges[rankMin][0], s->edges[rankMin][1], s->edges[k+1][0], s->edges[k+1][1]);
			vector(&vector_x2, &vector_y2, s->edges[rankMin][0], s->edges[rankMin][1], axis_x, axis_y);

			//We compute the angle between them
			intermediate1[k+1][1] = (int)angle(vector_x1, vector_y1, vector_x2, vector_y2, 0);

			//We compute the distance
			intermediate1[k+1][2] = (int)(distance(s->edges[rankMin][0], s->edges[rankMin][1], s->edges[k+1][0], s->edges[k+1][1]));
			
		}
		else if(k > rankMin){
			intermediate1[k][0] = k;

			//We compute the two vector
			vector(&vector_x1, &vector_y1, s->edges[rankMin][0], s->edges[rankMin][1], s->edges[k][0], s->edges[k][1]);
			vector(&vector_x2, &vector_y2, s->edges[rankMin][0], s->edges[rankMin][1], axis_x, axis_y);

			//We compute the angle between them
			intermediate1[k][1] = (int)(angle(vector_x1, vector_y1, vector_x2, vector_y2, 0)+0.5);

			//We compute the distance
			intermediate1[k][2] = (int)(distance(s->edges[rankMin][0], s->edges[rankMin][1], s->edges[k][0], s->edges[k][1]));
		}
	}
	
	ascendingSortInt(intermediate1, s->nbPtE);

	//We remove the element k when angle of k and k+1 is the same (colinear)
	int size = 1;
	for(int k = 1; k < s->nbPtE - 1; k++){
		//while(k < s->nbPtE - 1 && intermediate1[k][1] == intermediate1[k+1][1]){
		while(k < s->nbPtE - 1 && orientation( s->edges[intermediate1[0][0]][0], s->edges[intermediate1[0][0]][1],s->edges[intermediate1[k][0]][0], s->edges[intermediate1[k][0]][1], s->edges[intermediate1[k+1][0]][0], s->edges[intermediate1[k+1][0]][1]) == 0){
			intermediate1[k+1][2] = -1; //We put -1 in the last case to say that we don't keep this element
			k++;
		}
		size++; //we count the number of element in the next step
	}

	if(size < 3){ //If we don't have enough point, we stop the computation
		free1matrixInt(&intermediate1, s->nbPtE);
		s->hull = NULL;
		s->nbPtH = 0;
		return;
	}

	int ** intermediate2 = NULL;
	create1matrixInt(&intermediate2, 2, size);
	int i = 0;
	
	//We will remove the -1 marked point
	for(int k = 1; k < s->nbPtE; k++){
		while(k < s->nbPtE - 1 && intermediate1[k][2] == -1)
			k++;
		
		intermediate2[i][0] = intermediate1[k][0]; //we add the element without -1 in the new tab
		intermediate2[i][1] = 1;
		i++;
	}
	
	int ** intermediate3 = NULL;
	create1matrixInt(&intermediate3, 2, size);
	//We keep the three first points
	//1
	intermediate3[0][0] = intermediate2[0][0];
	intermediate3[0][1] = 1;
	//2
	intermediate3[1][0] = intermediate2[1][0];
	intermediate3[1][1] = 1;
	//3
	intermediate3[2][0] = intermediate2[2][0];
	intermediate3[2][1] = 1;

	int size2 = 3; //size of the real convex hull
	for(int k = 3; k < size; k++){
		intermediate3[k][0] = intermediate2[k][0];
		intermediate3[k][1] = 1;

		//We remove element when the angle formy by it and two previous one
		while(k < size - 1 && orientation(s->edges[intermediate2[k-2][0]][0], s->edges[intermediate2[k-2][0]][1], s->edges[intermediate2[k-1][0]][0], s->edges[intermediate2[k-1][0]][1], s->edges[intermediate2[k][0]][0], s->edges[intermediate2[k][0]][1]) <= 0){
			intermediate3[k][1] = -1;
			k++;
		}
		size2 ++;
	}

	if(size2 < 3){ //If we don't have enough point, we stop the computation
		free1matrixInt(&intermediate1, s->nbPtE);
		free1matrixInt(&intermediate2, size);
		s->hull = NULL;
		s->nbPtH = 0;
		return;
	}

	i = 0;
	//We conserve only the element with a +1 in the hull
	create1matrixInt(&(s->hull), 2, size2);
	s->nbPtH = size2;
	//1
	s->hull[0][0] = s->edges[intermediate3[0][0]][0];	
	s->hull[0][1] = s->edges[intermediate3[0][0]][1];
	//2
	s->hull[1][0] = s->edges[intermediate3[1][0]][0];	
	s->hull[1][1] = s->edges[intermediate3[1][0]][1];
	//3
	s->hull[2][0] = s->edges[intermediate3[2][0]][0];	
	s->hull[2][1] = s->edges[intermediate3[2][0]][1];
	
	i = 3;
	for(int k = 3; k < size; k++){
		//We remove element when the angle formy by it and two previous one
		while(k < size - 1 && intermediate3[k][1] == -1)
			k++;
			
		s->hull[i][0] = s->edges[intermediate3[k][0]][0];	
		s->hull[i][1] = s->edges[intermediate3[k][0]][1];
		if(i < size2 -1){
			i ++;	
		}
		else break;
	}

	free1matrixInt(&intermediate1, s->nbPtE);
	free1matrixInt(&intermediate2, size);
	free1matrixInt(&intermediate3, size);
	
	
	*shape = s;
}
