import operator
import os
import sys

import cv2

# We use the function detectMultiScale
    # detectMultiScale :
    # we provide it a haar cascade classifier that contains data about the object that we want to detect
    # we also set the scale factor and the min neighbour

    # first, the function will look for the object described in the file on a certain scale
    # then, it will change the scale and look again for objects and so on
    # the scale factor parameter is then the parameter used to the change of scale
    # higher the scale factor is, less we can detect object
    # in general, between 1.1 and 1.5

    # min neighbour is useful in order to avoid false positive
    # it will check that the object is not only detected on a scale but also on other ones
    # if the object is not detected on a number equal to or higher than min neighbour, we don't keep it
    # in general, between 3 and 5

# Use of CascadeClassfier
    # A cascade classifies contains the information about our object and allow its identification
    # The xml file is a haar cascade file. It can be generate with deep learning
    # for this version, the xml file is not generated by myself but taken on internet or on opencv


# do cat face detection on the frame and return a frame with bounding boxes of the detected bird s
def cat_face_detection(frame, grey, cat, cat_extended, limit):
    # we will put all the cat detected in an array
    cat_array = []

    # we use multiscale function with the cat detector of opencv to detect cats
    cat_detected = cat.detectMultiScale(grey, scaleFactor=1.2, minNeighbors=4)
    for x, y, w, h in cat_detected:
        cat_array.append([x, y, x + w, y + h])

    # we use multiscale function with the extended cat detector of opencv to detect cats
    cat_detected = cat_extended.detectMultiScale(grey, scaleFactor=1.2, minNeighbors=4)
    for x, y, w, h in cat_detected:
        cat_array.append([x, y, x + w, y + h])

    # we sort the cat detected according to their position x and then their position y
    cat_array = sorted(cat_array, key=operator.itemgetter(0, 1))

    # we will check for all the cats detected and check if the two detectors for cats have detected the same one
    # if yes, we will only keep of them
    i = 0
    for x, y, x2, y2 in cat_array:
        if not i or (x - cat_array[i - 1][0] > limit or y - cat_array[i - 1][1] > limit):
            # we draw a rectangle around the cat face
            cv2.rectangle(frame, (x, y), (x2, y2), (255, 0, 0), 2)
            # we write the number on the rectangle
            cv2.putText(frame, "cat #{}".format(i + 1), (x - 10, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.55,
                        (255, 0, 0), 2)
            i += 1

    return frame


# do bird detection on the frame and return a frame with bounding boxes of the detected bird s
def bird_detection(frame, grey, bird1, bird2, limit):
    # we put the bird detected in an array
    bird_array = []

    # we use multiscale function with the bird1 detector of opencv to detect birds
    birds1_detected = bird1.detectMultiScale(grey, scaleFactor=1.1, minNeighbors=5)
    for (x, y, w, h) in birds1_detected:
        bird_array.append([x, y, x + w, y + h])

    # we use multiscale function with the bird2 detector of opencv to detect birds
    birs2_detected = bird2.detectMultiScale(grey, scaleFactor=1.1, minNeighbors=5)
    for (x, y, w, h) in birs2_detected:
        bird_array.append([x, y, x + w, y + h])

    # we sort the cat and bird detected according to their position x and then their position y
    bird_array = sorted(bird_array, key=operator.itemgetter(0, 1))

    # we will check for all the cats detected and check if the two detectors for birds have detected the same one
    # if yes, we will only keep of them
    j = 0
    for x, y, x2, y2 in bird_array:
        if not j or (x - bird_array[j - 1][0] > limit or y - bird_array[j - 1][1] > limit):
            # we draw a rectangle around the bird
            cv2.rectangle(frame, (x, y), (x2, y2), (0, 255, 0), 2)
            # we write the number on the rectangle
            cv2.putText(frame, "bird #{}".format(j + 1), (x - 10, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.55,
                        (0, 255, 0), 2)
            j += 1

    return frame


# principal function
def main_animal_detection(choice):
    # detection of cat face - xml source : opencv
    cat = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalcatface.xml")
    cat_extended = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalcatface_extended.xml")

    # detection of flying birds - xml source : git of souravjyoti
    bird1 = cv2.CascadeClassifier(cv2.data.haarcascades + "bird1-cascade.xml")
    bird2 = cv2.CascadeClassifier(cv2.data.haarcascades + "bird2-cascade.xml")

    cap = cv2.VideoCapture(0)
    limit = 100

    while True:
        try:
            choice1 = int(input("Do you want to use the webcam (0) or a video (otherwise) ?"))
            break
        except ValueError:
            print("Your choice is not a number.")

    if choice1 != 0:
        # Upload the video in which we want to find the animals
        path = input("Please, enter the absolute path of a video : ")
        is_exist = os.path.exists(path)
        while not is_exist:
            print("Your video is not reachable")
            path = input("Please, enter an available absolute path : ")
            is_exist = os.path.exists(path)

        cap = cv2.VideoCapture(path)

    if not cap.isOpened():
        print("We can't open the video")
        sys.exit(1)

    while True:
        # we recover frame by frame
        ret, frame = cap.read()

        # if frame is read correctly, ret is True
        if not ret:
            print("We cannot receive the frame anymore. It could be because it is the end of the stream or because an "
                  "error has occurred.")
            break

        # it is easier to detect when the image is in greyscale
        grey = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        print(choice)
        if choice == 1:
            frame = cat_face_detection(frame, grey, cat, cat_extended, limit)
        else:
            frame = bird_detection(frame, grey, bird1, bird2, limit)

        cv2.imshow('video', frame)

        if cv2.waitKey(1) == ord('0'):
            break

    cap.release()
    cv2.destroyAllWindows()
